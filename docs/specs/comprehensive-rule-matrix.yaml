# Comprehensive Rule Matrix Specification

version: '1.0'
name: 'Comprehensive Rule Matrix Engine'
description: 'Hard-coded rule validation system for slow-pitch softball scenarios'

## Domain Model Extensions

entities:
  RuleMatrix:
    description: 'Central rule validation and outcome prediction service'
    methods:
      getValidOutcomes:
        input:
          baseState: BaserunnerState
          hitType: HitType
        output: ValidOutcome[]
        description: 'Returns all possible valid outcomes for a base situation and hit type'

      validateTransition:
        input:
          before: BaserunnerState
          after: BaserunnerState
          hitType: HitType
          rbis: number
          outs: number
        output: ValidationResult
        description: 'Validates if a transition follows softball rules'

      getAvailableHitTypes:
        input:
          baseState: BaserunnerState
          inningState: InningState
        output: HitType[]
        description: 'Returns hit types available for current game situation'

  ValidOutcome:
    description: 'Represents a possible outcome scenario'
    properties:
      afterState: BaserunnerState
      rbis: number
      outs: number
      runsScored: string[]
      description: string
      likelihood: OutcomeLikelihood # "standard" | "aggressive" | "error"

  ValidationResult:
    properties:
      isValid: boolean
      violations: RuleViolation[]
      suggestedCorrections: ValidOutcome[]

value_objects:
  HitType:
    description: 'Extended hit type enumeration'
    values:
      - '1B' # Single
      - '2B' # Double
      - '3B' # Triple
      - 'HR' # Home Run
      - 'BB' # Walk
      - 'IBB' # Intentional Walk
      - 'SF' # Sacrifice Fly
      - 'E' # Error
      - 'FC' # Fielder's Choice
      - 'SO' # Strikeout
      - 'GO' # Ground Out
      - 'AO' # Air Out
      - 'DP' # Double Play

  BaserunnerConfiguration:
    description: 'All possible baserunner states (8 total)'
    configurations:
      - key: 'empty'
        state: '(null, null, null)'
        description: 'No runners on base'

      - key: 'first_only'
        state: '(runner, null, null)'
        description: 'Runner on first base only'

      - key: 'second_only'
        state: '(null, runner, null)'
        description: 'Runner on second base only'

      - key: 'third_only'
        state: '(null, null, runner)'
        description: 'Runner on third base only'

      - key: 'first_second'
        state: '(runner1, runner2, null)'
        description: 'Runners on first and second'

      - key: 'first_third'
        state: '(runner1, null, runner3)'
        description: 'Runners on first and third'

      - key: 'second_third'
        state: '(null, runner2, runner3)'
        description: 'Runners on second and third'

      - key: 'loaded'
        state: '(runner1, runner2, runner3)'
        description: 'Bases loaded'

## Rule Matrix Structure

rule_matrix:
  description: 'Hard-coded lookup table for all valid scenarios'
  structure: 'Map<BaseConfigKey, Map<HitType, ValidOutcome[]>>'

  implementation_notes:
    - 'Matrix contains 8 base configurations Ã— 13 hit types = 104 scenario groups'
    - 'Each scenario can have multiple valid outcomes (standard, aggressive, error)'
    - 'Lookup time must be O(1) for real-time performance'
    - 'Matrix is immutable and loaded at application startup'

## Basic Rule Definitions

base_advancement_rules:
  single_1B:
    batter_advancement: 1 # to first base
    forced_runner_advancement: 1 # minimum advancement
    optional_advancement: true # runners may advance beyond minimum

  double_2B:
    batter_advancement: 2 # to second base
    forced_runner_advancement: 2 # all runners advance at least 2
    optional_advancement: false # all runners must advance at least 2

  triple_3B:
    batter_advancement: 3 # to third base
    forced_runner_advancement: 'home' # all runners score
    optional_advancement: false

  home_run_HR:
    batter_advancement: 'home'
    forced_runner_advancement: 'home'
    all_runners_score: true

  walk_BB:
    batter_advancement: 1
    forced_runner_advancement: 1 # only if forced
    forced_only: true

  strikeout_SO:
    batter_result: 'out'
    runner_advancement: 0 # no advancement

  ground_out_GO:
    batter_result: 'out'
    possible_force_plays: true
    runner_advancement: 0 # unless forced out

  air_out_AO:
    batter_result: 'out'
    runner_advancement: 0
    tagging_up_allowed: true # future implementation

  sacrifice_fly_SF:
    batter_result: 'out'
    runner_on_third_scores: true # if present
    other_runner_advancement: 0

  fielders_choice_FC:
    batter_advancement: 1 # reaches safely
    force_out_lead_runner: true
    net_runners: 0 # same number of runners as before

  double_play_DP:
    outs_recorded: 2
    typical_scenario: 'ground ball with runner on first'

  error_E:
    base_hit_equivalent: 'varies' # depends on error type
    additional_advancement: 'possible'
    implementation: 'future_phase'

## Example Matrix Entries

example_scenarios:
  empty_bases_single:
    before: '(null, null, null)'
    hit_type: '1B'
    outcomes:
      - after: '(batter, null, null)'
        rbis: 0
        outs: 0
        runsScored: []
        description: 'Standard single'

  first_only_double:
    before: '(runner1, null, null)'
    hit_type: '2B'
    outcomes:
      - after: '(null, batter, null)'
        rbis: 1
        outs: 0
        runsScored: ['runner1']
        description: 'Runner scores from first on double'

  loaded_bases_triple:
    before: '(runner1, runner2, runner3)'
    hit_type: '3B'
    outcomes:
      - after: '(null, null, null)'
        rbis: 4 # all three runners + batter scores
        outs: 0
        runsScored: ['runner1', 'runner2', 'runner3', 'batter']
        description: 'Grand slam triple - all runners score'

## API Contracts

interfaces:
  IRuleMatrixService:
    methods:
      getValidOutcomes:
        description: 'Get all valid outcomes for scenario'
        signature: '(BaserunnerState, HitType) => ValidOutcome[]'
        performance: '< 50ms'

      validateAtBatScenario:
        description: 'Validate proposed at-bat result'
        signature: '(AtBatScenario) => ValidationResult'

      getAvailableHitTypes:
        description: 'Get hit types available for current state'
        signature: '(BaserunnerState, InningState) => HitType[]'

      scanTestsForViolations:
        description: 'Validate existing test scenarios'
        signature: '(TestCase[]) => RuleViolation[]'

## Future Extensions

advanced_scenarios:
  aggressive_advancement:
    description: 'Runners attempt extra bases and may be out'
    implementation_phase: 'Phase 2'
    examples:
      - 'Runner on 1st attempts home on double, thrown out at plate'
      - 'Batter attempts stretch double, out at second'

  fielding_errors:
    description: 'Errors allow additional advancement beyond normal'
    implementation_phase: 'Phase 2'
    examples:
      - 'Single + throwing error = runner reaches second'
      - 'Double + dropped ball = extra base for all runners'

  complex_double_plays:
    description: 'Partial double plays with baserunner advancement'
    implementation_phase: 'Phase 3'
    examples:
      - 'DP attempt, batter out but runner advances'
      - 'Line drive DP catches runner off base'

## Performance Requirements

performance_targets:
  rule_lookup: '< 50ms'
  matrix_size: '< 5MB memory'
  concurrent_validations: '100+ per second'
  test_scanning: '< 2 seconds for full test suite'

## Testing Strategy

test_categories:
  unit_tests:
    - 'Each hit type scenario validation'
    - 'Edge case boundary conditions'
    - 'Performance benchmarks'

  integration_tests:
    - 'Domain entity integration'
    - 'Use case workflow validation'
    - 'UI component integration'

  validation_tests:
    - 'Expert rule verification'
    - 'Real-world scenario accuracy'
    - 'Existing test suite compliance'

## Implementation Phases

phase_1_mvp:
  scope: 'Basic rule matrix with standard scenarios'
  hit_types: ['1B', '2B', '3B', 'HR', 'BB', 'SO', 'GO', 'AO']
  scenarios: 'Standard advancement only'
  deliverables:
    - 'Core rule matrix service'
    - 'Basic outcome validation'
    - 'Test violation scanning tool'

phase_2_advanced:
  scope: 'Aggressive advancement and error scenarios'
  hit_types: ['SF', 'FC', 'DP', 'E', 'IBB']
  scenarios: 'Advanced outcomes with outs and errors'
  deliverables:
    - 'Advanced outcome tracking'
    - 'Error scenario handling'
    - 'Complex UI workflows'

phase_3_expert:
  scope: 'Expert-level rule validation and edge cases'
  scenarios: 'All possible softball situations'
  deliverables:
    - 'Complete rule coverage'
    - 'Configurable rule sets'
    - 'Expert validation tools'
