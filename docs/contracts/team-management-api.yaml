openapi: 3.0.3
info:
  title: Team Management API
  description: API contract for team and player management operations
  version: 1.0.0
  contact:
    name: Breaking-Bat Team
    email: backend-team@example.com

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.breaking-bat.com/v1
    description: Production server

paths:
  /teams:
    post:
      summary: Create new team
      description: Creates a new team with specified name
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamRequest'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/ValidationError'

    get:
      summary: List teams
      description: Returns list of all teams
      operationId: listTeams
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

  /teams/{teamId}:
    get:
      summary: Get team details
      description: Returns detailed team information including players
      operationId: getTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamWithPlayers'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update team
      description: Updates team information
      operationId: updateTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamRequest'
      responses:
        '200':
          description: Team updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

    delete:
      summary: Delete team
      description: Deletes a team (only if no associated games exist)
      operationId: deleteTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Team deleted successfully
        '409':
          description: Cannot delete team with associated games

  /teams/{teamId}/players:
    post:
      summary: Add player to team
      description: Creates a new player and adds them to the team
      operationId: addPlayer
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlayerRequest'
      responses:
        '201':
          description: Player added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'

    get:
      summary: List team players
      description: Returns all players for a team
      operationId: listTeamPlayers
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of team players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'

  /players/{playerId}:
    get:
      summary: Get player details
      description: Returns detailed player information
      operationId: getPlayer
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Player details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update player
      description: Updates player information
      operationId: updatePlayer
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlayerRequest'
      responses:
        '200':
          description: Player updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'

    delete:
      summary: Remove player
      description: Removes player from team (only if not in active lineups)
      operationId: removePlayer
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Player removed successfully
        '409':
          description: Cannot remove player in active lineup

  /seasons:
    post:
      summary: Create season
      description: Creates a new season
      operationId: createSeason
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSeasonRequest'
      responses:
        '201':
          description: Season created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Season'

    get:
      summary: List seasons
      description: Returns list of all seasons
      operationId: listSeasons
      responses:
        '200':
          description: List of seasons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Season'

  /game-types:
    post:
      summary: Create game type
      description: Creates a new game type
      operationId: createGameType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameTypeRequest'
      responses:
        '201':
          description: Game type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameType'

    get:
      summary: List game types
      description: Returns list of all game types
      operationId: listGameTypes
      responses:
        '200':
          description: List of game types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameType'

components:
  schemas:
    CreateTeamRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'

    UpdateTeamRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'

    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        color:
          type: string
        playerCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TeamWithPlayers:
      allOf:
        - $ref: '#/components/schemas/Team'
        - type: object
          properties:
            players:
              type: array
              items:
                $ref: '#/components/schemas/Player'

    CreatePlayerRequest:
      type: object
      required:
        - name
        - jerseyNumber
        - primaryPosition
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        jerseyNumber:
          type: string
          minLength: 1
          maxLength: 10
        primaryPosition:
          type: string
          enum: [P, C, '1B', '2B', '3B', SS, LF, CF, RF, EH]
        secondaryPositions:
          type: array
          items:
            type: string
            enum: [P, C, '1B', '2B', '3B', SS, LF, CF, RF, EH]
        isActive:
          type: boolean
          default: true

    UpdatePlayerRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        jerseyNumber:
          type: string
          minLength: 1
          maxLength: 10
        primaryPosition:
          type: string
          enum: [P, C, '1B', '2B', '3B', SS, LF, CF, RF, EH]
        secondaryPositions:
          type: array
          items:
            type: string
            enum: [P, C, '1B', '2B', '3B', SS, LF, CF, RF, EH]
        isActive:
          type: boolean

    Player:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamId:
          type: string
          format: uuid
        name:
          type: string
        jerseyNumber:
          type: string
        primaryPosition:
          type: string
        secondaryPositions:
          type: array
          items:
            type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateSeasonRequest:
      type: object
      required:
        - name
        - year
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        year:
          type: integer
          minimum: 2020
          maximum: 2050

    Season:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        year:
          type: integer
        createdAt:
          type: string
          format: date-time

    CreateGameTypeRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500

    GameType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error_code:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
