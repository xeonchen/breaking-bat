name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # TIER 1A: Fast Feedback (Parallel)
  fast-feedback:
    name: 'Fast Feedback'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Fast checks only - no unit tests
      - name: Type checking
        run: npm run type-check

      - name: Linting
        run: npm run lint

  # TIER 1B: PR Validation (Parallel to fast-feedback, PR only)
  pr-validation:
    name: 'PR Validation'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Commit message validation
        run: npx commitlint --from=origin/main --to=HEAD --verbose

  # TIER 2A: Build (After fast-feedback)
  build:
    name: 'Build & Verify'
    needs: [fast-feedback]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      # Build artifact verification
      - name: Verify build artifacts
        run: |
          echo "üì¶ Build Artifacts:"
          ls -la dist/
          echo "üìÑ HTML Entry Point:"
          head -5 dist/index.html
          echo "üîß Service Worker:"
          ls -la dist/sw.js
          echo "üìã Web Manifest:"
          ls -la dist/manifest.webmanifest

  # TIER 2B: Security (Parallel to build)
  security:
    name: 'Security & Compliance'
    needs: [fast-feedback]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Uses simplified security:check (audit + lint)
      - name: Security audit
        run: npm run security:check

      - name: License compliance
        run: npm run licenses:check

  # TIER 3: Unit Tests (After build)
  unit-tests:
    name: 'Unit Tests & Coverage'
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Combined unit tests + coverage
      - name: Run unit tests with coverage
        run: npm run test:coverage

  # TIER 4: E2E Tests (After unit tests)
  e2e-tests:
    name: 'End-to-End Tests'
    needs: [unit-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build for E2E tests
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e:ci
        timeout-minutes: 35

      - name: Upload E2E test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: test-results/

  # TIER 5: Quality Gates (Final validation)
  quality-gates:
    name: 'Quality Gates'
    needs:
      [fast-feedback, build, security, unit-tests, e2e-tests, pr-validation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Evaluate results
        run: |
          echo "üîç Checking all results..."

          # Check each required job
          if [[ "${{ needs.fast-feedback.result }}" != "success" ]]; then
            echo "‚ùå Fast feedback failed - Type checking or linting failed"
            exit 1
          fi

          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Build failed - Production build or artifact verification failed"
            exit 1
          fi

          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "‚ùå Security checks failed - Audit or license compliance failed"
            exit 1
          fi

          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "‚ùå Unit tests failed - Unit tests or coverage failed"
            exit 1
          fi

          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "‚ùå E2E tests failed - End-to-end testing failed"
            exit 1
          fi

          # PR validation only required for PRs
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ needs.pr-validation.result }}" != "success" ]]; then
            echo "‚ùå PR validation failed - Commit message validation failed"
            exit 1
          fi

          echo "‚úÖ All quality gates passed!"
          echo "üìä Results Summary:"
          echo "  - Fast Feedback: ${{ needs.fast-feedback.result }}"
          echo "  - Build: ${{ needs.build.result }}"
          echo "  - Security: ${{ needs.security.result }}"
          echo "  - Unit Tests: ${{ needs.unit-tests.result }}"
          echo "  - E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "  - PR Validation: ${{ needs.pr-validation.result }}"
